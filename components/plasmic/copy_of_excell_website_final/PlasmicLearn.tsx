/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: b44pUm4nfW6C6Fzcbpx1wb
// Component: Wyk1x12kUwWI

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import { AntdTabs } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdTabItem } from "@plasmicpkgs/antd5/skinny/registerTabs";
import { AntdAccordion } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { accordionHelpers as AntdAccordion_Helpers } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { AntdAccordionItem } from "@plasmicpkgs/antd5/skinny/registerCollapse";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import { useScreenVariants as useScreenVariantswYGucrvFIpH5 } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: wYGucrvFIpH5/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: b44pUm4nfW6C6Fzcbpx1wb/projectcss
import sty from "./PlasmicLearn.module.css"; // plasmic-import: Wyk1x12kUwWI/css

import GeoAltFill1SvgIcon from "./icons/PlasmicIcon__GeoAltFill1Svg"; // plasmic-import: N661ASTPOBbP/icon
import EnvelopeFill1SvgIcon from "./icons/PlasmicIcon__EnvelopeFill1Svg"; // plasmic-import: K3EMqprSG4Sx/icon
import Linkedin2SvgIcon from "./icons/PlasmicIcon__Linkedin2Svg"; // plasmic-import: JSoyWAqD2o0A/icon
import Facebook2SvgIcon from "./icons/PlasmicIcon__Facebook2Svg"; // plasmic-import: 3taEzhm_7HIU/icon
import ArrowUpRightCircleFill2SvgIcon from "./icons/PlasmicIcon__ArrowUpRightCircleFill2Svg"; // plasmic-import: QV28IsMmBIyd/icon

createPlasmicElementProxy;

export type PlasmicLearn__VariantMembers = {};
export type PlasmicLearn__VariantsArgs = {};
type VariantPropType = keyof PlasmicLearn__VariantsArgs;
export const PlasmicLearn__VariantProps = new Array<VariantPropType>();

export type PlasmicLearn__ArgsType = {};
type ArgPropType = keyof PlasmicLearn__ArgsType;
export const PlasmicLearn__ArgProps = new Array<ArgPropType>();

export type PlasmicLearn__OverridesType = {
  learnPage?: Flex__<"div">;
  landingPage?: Flex__<"div">;
  container2?: Flex__<"div">;
  heading?: Flex__<"div">;
  navigationBar?: Flex__<typeof NavigationBar>;
  logo3?: Flex__<"a"> & Partial<LinkProps>;
  solution3?: Flex__<"a"> & Partial<LinkProps>;
  logo4?: Flex__<"a"> & Partial<LinkProps>;
  container?: Flex__<"div">;
  card?: Flex__<"div">;
  faQsTab?: Flex__<typeof AntdTabs>;
  aboutSolar?: Flex__<typeof AntdTabItem>;
  aboutAccordion?: Flex__<typeof AntdAccordion>;
  _1?: Flex__<typeof AntdAccordionItem>;
  _2?: Flex__<typeof AntdAccordionItem>;
  _3?: Flex__<typeof AntdAccordionItem>;
  _4?: Flex__<typeof AntdAccordionItem>;
  footer?: Flex__<"footer">;
  section5?: Flex__<"div">;
  brandLogo3?: Flex__<"div">;
  section6?: Flex__<"div">;
  h4?: Flex__<"h4">;
  whereToFindUs3?: Flex__<"div">;
  connectWithUs4?: Flex__<"div">;
  getSolar3?: Flex__<"div">;
};

export interface DefaultLearnProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLearn__RenderFunc(props: {
  variants: PlasmicLearn__VariantsArgs;
  args: PlasmicLearn__ArgsType;
  overrides: PlasmicLearn__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "faQsTab.activeKey",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "1"
      },
      {
        path: "aboutAccordion.activePanelId",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        onMutate: generateOnMutateForSpec(
          "activePanelId",
          AntdAccordion_Helpers
        )
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantswYGucrvFIpH5()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"learnPage"}
        data-plasmic-override={overrides.learnPage}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.learnPage
        )}
        id={``}
      >
        <div
          data-plasmic-name={"landingPage"}
          data-plasmic-override={overrides.landingPage}
          className={classNames(projectcss.all, sty.landingPage)}
        >
          <div
            data-plasmic-name={"container2"}
            data-plasmic-override={overrides.container2}
            className={classNames(projectcss.all, sty.container2)}
          >
            <div
              data-plasmic-name={"heading"}
              data-plasmic-override={overrides.heading}
              className={classNames(projectcss.all, sty.heading)}
            >
              <div className={classNames(projectcss.all, sty.column__kuGxu)}>
                <div className={classNames(projectcss.all, sty.freeBox__jvBv)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1___2Ix
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        <React.Fragment>{"Got Questions?\n"}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Reach us Today"}
                        </span>
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        <React.Fragment>{"Got Questions?\n"}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Reach us Today"}
                        </span>
                      </React.Fragment>
                    )}
                  </h1>
                </div>
              </div>
            </div>
          </div>
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            brand={
              <PlasmicLink__
                data-plasmic-name={"logo3"}
                data-plasmic-override={overrides.logo3}
                className={classNames(projectcss.all, projectcss.a, sty.logo3)}
                component={Link}
                href={"#"}
                platform={"nextjs"}
              />
            }
            className={classNames("__wab_instance", sty.navigationBar)}
            closeButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__bJtrp)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"32px"}
                src={{
                  src: "/plasmic/copy_of_excell_website_final/images/xLgSvg2.svg",
                  fullWidth: 24,
                  fullHeight: 25,
                  aspectRatio: 0.96
                }}
              />
            }
            forceOpenMenu={
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
            }
            itemsGap={
              hasVariant(globalVariants, "screen", "mobileOnly") ? 48 : 48
            }
            menuItems={
              <React.Fragment>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__oQlxy
                  )}
                  component={Link}
                  href={`/`}
                  platform={"nextjs"}
                >
                  {"Home"}
                </PlasmicLink__>
                <PlasmicLink__
                  data-plasmic-name={"solution3"}
                  data-plasmic-override={overrides.solution3}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.solution3
                  )}
                  component={Link}
                  href={`/solutions`}
                  platform={"nextjs"}
                >
                  {"Solution"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__cgosX
                  )}
                  component={Link}
                  href={`/projects`}
                  platform={"nextjs"}
                >
                  {"Projects"}
                </PlasmicLink__>
                <PlasmicLink__
                  data-plasmic-name={"logo4"}
                  data-plasmic-override={overrides.logo4}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.logo4
                  )}
                  component={Link}
                  href={`/`}
                  platform={"nextjs"}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__p1TQ7)}
                    displayHeight={"64px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"298px"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    src={{
                      src: "/plasmic/copy_of_excell_website_final/images/excellVerticalLogoPng.png",
                      fullWidth: 987,
                      fullHeight: 1002,
                      aspectRatio: undefined
                    }}
                  />
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__pcojo
                  )}
                  component={Link}
                  href={`/about`}
                  platform={"nextjs"}
                >
                  {"About"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__jL4Uu
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {"Learn"}
                </PlasmicLink__>
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__qI90P
                  )}
                  component={Link}
                  href={`/contact`}
                  platform={"nextjs"}
                >
                  {"Contact Us"}
                </PlasmicLink__>
              </React.Fragment>
            }
            openButton={
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__tzGKj)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"32px"}
                src={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? {
                        src: "/plasmic/copy_of_excell_website_final/images/hamburgerMenuSvg.svg",
                        fullWidth: 24,
                        fullHeight: 25,
                        aspectRatio: 0.96
                      }
                    : undefined
                }
                width={"32"}
              />
            }
            responsiveBreakpoint={768}
          />
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"container"}
          data-plasmic-override={overrides.container}
          hasGap={true}
          className={classNames(projectcss.all, sty.container)}
          id={"reach-out-section"}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"card"}
            data-plasmic-override={overrides.card}
            hasGap={true}
            className={classNames(projectcss.all, sty.card)}
          >
            <AntdTabs
              data-plasmic-name={"faQsTab"}
              data-plasmic-override={overrides.faQsTab}
              activeKey={generateStateValueProp($state, [
                "faQsTab",
                "activeKey"
              ])}
              animateTabBar={true}
              animateTabContent={false}
              animated={true}
              className={classNames("__wab_instance", sty.faQsTab)}
              defaultActiveKey={"1"}
              items={
                <AntdTabItem
                  data-plasmic-name={"aboutSolar"}
                  data-plasmic-override={overrides.aboutSolar}
                  className={classNames("__wab_instance", sty.aboutSolar)}
                  forceRender={false}
                  key={"1"}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uLsN2
                      )}
                    >
                      {"About Solar"}
                    </div>
                  }
                >
                  {(() => {
                    const child$Props = {
                      activeKey: generateStateValueProp($state, [
                        "aboutAccordion",
                        "activePanelId"
                      ]),
                      bordered: true,
                      className: classNames(
                        "__wab_instance",
                        sty.aboutAccordion
                      ),
                      expandIconPosition: "end",
                      forceRender: false,
                      items: (
                        <React.Fragment>
                          <AntdAccordionItem
                            data-plasmic-name={"_1"}
                            data-plasmic-override={overrides._1}
                            className={classNames("__wab_instance", sty._1)}
                            id={1}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__eQuc
                                )}
                              >
                                {"Why go Solar now?"}
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wm5Hm
                              )}
                            >
                              {
                                "It\u2019s abundant, clean, and can drastically lower your bills."
                              }
                            </div>
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            data-plasmic-name={"_2"}
                            data-plasmic-override={overrides._2}
                            className={classNames("__wab_instance", sty._2)}
                            id={2}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__eTsDz
                                )}
                              >
                                {
                                  "How does a Solar Photovoltaic (PV) system work?"
                                }
                              </div>
                            }
                            showArrow={true}
                          >
                            {
                              "PV cells collect sunlight, converted via inverter into usable energy that powers your business operations."
                            }
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            data-plasmic-name={"_3"}
                            data-plasmic-override={overrides._3}
                            className={classNames("__wab_instance", sty._3)}
                            id={"3"}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__hVzkT
                                )}
                              >
                                {"What is Net Metering?"}
                              </div>
                            }
                            showArrow={true}
                          >
                            {
                              "Feed excess power to the grid and earn bill credits\u2014if eligible. Under the Renewable Energy Act (RA 9513) and its rules, net metering is available to qualified users, subject to certain utility and technical limitations. We\u2019ll help you check if your system can apply."
                            }
                          </AntdAccordionItem>
                          <AntdAccordionItem
                            data-plasmic-name={"_4"}
                            data-plasmic-override={overrides._4}
                            className={classNames("__wab_instance", sty._4)}
                            id={"4"}
                            label2={
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___81Nuz
                                )}
                              >
                                {"How much can I save on my electricity bills?"}
                              </div>
                            }
                            showArrow={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___9Alx
                              )}
                            >
                              {
                                "Depending on your setup, solar can cut electricity costs by up to 60%. Actual savings vary based on system design and building energy use."
                              }
                            </div>
                          </AntdAccordionItem>
                        </React.Fragment>
                      ),
                      onChange: async (...eventArgs: any) => {
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "activePanelId",
                          ["aboutAccordion", "activePanelId"],
                          AntdAccordion_Helpers
                        ).apply(null, eventArgs);
                      },
                      size: "large"
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "activePanelId",
                          plasmicStateName: "aboutAccordion.activePanelId"
                        }
                      ],
                      [],
                      AntdAccordion_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <AntdAccordion
                        data-plasmic-name={"aboutAccordion"}
                        data-plasmic-override={overrides.aboutAccordion}
                        {...child$Props}
                      />
                    );
                  })()}
                </AntdTabItem>
              }
              onChange={async (...eventArgs: any) => {
                generateStateOnChangeProp($state, [
                  "faQsTab",
                  "activeKey"
                ]).apply(null, eventArgs);
              }}
              size={"large"}
              sticky={false}
              tabBarBackground={"#FFF"}
              tabsDropdownScopeClassName={sty["faQsTab__tabsDropdown"]}
              tabsScopeClassName={sty["faQsTab__tabs"]}
              type={"card"}
            />

            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___06XUd)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__a4FZ7)}
              >
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__lMKjz
                  )}
                >
                  {"Can't find what you need?"}
                </h1>
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__vp4Rf
                  )}
                >
                  {"We got you covered!"}
                </h1>
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox___2S0P7)}>
                <Stack__
                  as={PlasmicLink__}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__mc38O
                  )}
                  component={Link}
                  href={`/get-solar`}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kxH1M
                    )}
                  >
                    {"Send us your Questions"}
                  </div>
                </Stack__>
              </div>
            </Stack__>
          </Stack__>
        </Stack__>
        <footer
          data-plasmic-name={"footer"}
          data-plasmic-override={overrides.footer}
          className={classNames(projectcss.all, sty.footer)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__pgDSx)}>
            <div
              data-plasmic-name={"section5"}
              data-plasmic-override={overrides.section5}
              className={classNames(projectcss.all, sty.section5)}
            >
              <div
                data-plasmic-name={"brandLogo3"}
                data-plasmic-override={overrides.brandLogo3}
                className={classNames(projectcss.all, sty.brandLogo3)}
              >
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__mcBua)}
                  displayHeight={"auto"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100%"
                      : "50%"
                  }
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"240px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/copy_of_excell_website_final/images/excellHorizontalLogoPng.png",
                    fullWidth: 2001,
                    fullHeight: 706,
                    aspectRatio: undefined
                  }}
                />

                <div
                  data-plasmic-name={"section6"}
                  data-plasmic-override={overrides.section6}
                  className={classNames(projectcss.all, sty.section6)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__hzGqb)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__lcvt9)}
                    >
                      <h4
                        data-plasmic-name={"h4"}
                        data-plasmic-override={overrides.h4}
                        className={classNames(
                          projectcss.all,
                          projectcss.h4,
                          projectcss.__wab_text,
                          sty.h4
                        )}
                      >
                        {"Better Energy, Better Business."}
                      </h4>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yIUwX
                        )}
                      >
                        {
                          "We help businesses thrive by turning unused spaces into energy-saving assets. Our end-to-end solar solutions\u2014from expert energy assessments to premium installations and lifetime support\u2014are built for long-term value, reliability, and sustainability."
                        }
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qSPw
                        )}
                      >
                        {
                          "\u00a9 Copyright 2025 Excell Energy and Powergen Inc. All rights reserved."
                        }
                      </div>
                    </Stack__>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__ouL0Z)}
                  >
                    <div
                      data-plasmic-name={"whereToFindUs3"}
                      data-plasmic-override={overrides.whereToFindUs3}
                      className={classNames(projectcss.all, sty.whereToFindUs3)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mv7Tz
                        )}
                      >
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5___5R7B
                          )}
                        >
                          {"Where to find us?"}
                        </h5>
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__c7Ffh
                        )}
                      >
                        <GeoAltFill1SvgIcon
                          className={classNames(projectcss.all, sty.svg__srTto)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xkpp0
                          )}
                        >
                          {
                            "Unit 2618, 26th flr, High Street South Corporate Plaza Tower 1 26th St, cor 9th Ave, 1634 Taguig, Philippines"
                          }
                        </div>
                      </Stack__>
                    </div>
                    <div
                      data-plasmic-name={"connectWithUs4"}
                      data-plasmic-override={overrides.connectWithUs4}
                      className={classNames(projectcss.all, sty.connectWithUs4)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__wlNrT
                        )}
                      >
                        <h5
                          className={classNames(
                            projectcss.all,
                            projectcss.h5,
                            projectcss.__wab_text,
                            sty.h5__aVmpQ
                          )}
                        >
                          {"Connect with us!"}
                        </h5>
                      </div>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zHked
                        )}
                      >
                        <EnvelopeFill1SvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___36QaE
                          )}
                          role={"img"}
                        />

                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__tw7Um
                          )}
                          component={Link}
                          href={"https://www.plasmic.app/"}
                          platform={"nextjs"}
                        >
                          {"solutions@excell.energy"}
                        </PlasmicLink__>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___3FIwq
                        )}
                      >
                        <Linkedin2SvgIcon
                          className={classNames(projectcss.all, sty.svg__nLah8)}
                          role={"img"}
                        />

                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__sH0Ib
                          )}
                          component={Link}
                          href={"https://www.plasmic.app/"}
                          platform={"nextjs"}
                        >
                          {"Excell Energy and PowerGen Corp."}
                        </PlasmicLink__>
                      </Stack__>
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__nuNh1
                        )}
                      >
                        <Facebook2SvgIcon
                          className={classNames(projectcss.all, sty.svg__wv8Xg)}
                          role={"img"}
                        />

                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__rxm7T
                          )}
                          component={Link}
                          href={"https://www.plasmic.app/"}
                          platform={"nextjs"}
                        >
                          {"Excell Energy and PowerGen Corp."}
                        </PlasmicLink__>
                      </Stack__>
                    </div>
                    <div
                      data-plasmic-name={"getSolar3"}
                      data-plasmic-override={overrides.getSolar3}
                      className={classNames(projectcss.all, sty.getSolar3)}
                    >
                      <Stack__
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___9Zoa7
                        )}
                      >
                        <Stack__
                          as={PlasmicLink__}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link___8TPg4
                          )}
                          component={Link}
                          href={`/get-solar`}
                          platform={"nextjs"}
                        >
                          <h5
                            className={classNames(
                              projectcss.all,
                              projectcss.h5,
                              projectcss.__wab_text,
                              sty.h5__wIgk
                            )}
                          >
                            {"Get Solar"}
                          </h5>
                          <ArrowUpRightCircleFill2SvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__aEf7
                            )}
                            role={"img"}
                          />
                        </Stack__>
                      </Stack__>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </footer>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  learnPage: [
    "learnPage",
    "landingPage",
    "container2",
    "heading",
    "navigationBar",
    "logo3",
    "solution3",
    "logo4",
    "container",
    "card",
    "faQsTab",
    "aboutSolar",
    "aboutAccordion",
    "_1",
    "_2",
    "_3",
    "_4",
    "footer",
    "section5",
    "brandLogo3",
    "section6",
    "h4",
    "whereToFindUs3",
    "connectWithUs4",
    "getSolar3"
  ],
  landingPage: [
    "landingPage",
    "container2",
    "heading",
    "navigationBar",
    "logo3",
    "solution3",
    "logo4"
  ],
  container2: ["container2", "heading"],
  heading: ["heading"],
  navigationBar: ["navigationBar", "logo3", "solution3", "logo4"],
  logo3: ["logo3"],
  solution3: ["solution3"],
  logo4: ["logo4"],
  container: [
    "container",
    "card",
    "faQsTab",
    "aboutSolar",
    "aboutAccordion",
    "_1",
    "_2",
    "_3",
    "_4"
  ],
  card: [
    "card",
    "faQsTab",
    "aboutSolar",
    "aboutAccordion",
    "_1",
    "_2",
    "_3",
    "_4"
  ],
  faQsTab: ["faQsTab", "aboutSolar", "aboutAccordion", "_1", "_2", "_3", "_4"],
  aboutSolar: ["aboutSolar", "aboutAccordion", "_1", "_2", "_3", "_4"],
  aboutAccordion: ["aboutAccordion", "_1", "_2", "_3", "_4"],
  _1: ["_1"],
  _2: ["_2"],
  _3: ["_3"],
  _4: ["_4"],
  footer: [
    "footer",
    "section5",
    "brandLogo3",
    "section6",
    "h4",
    "whereToFindUs3",
    "connectWithUs4",
    "getSolar3"
  ],
  section5: [
    "section5",
    "brandLogo3",
    "section6",
    "h4",
    "whereToFindUs3",
    "connectWithUs4",
    "getSolar3"
  ],
  brandLogo3: [
    "brandLogo3",
    "section6",
    "h4",
    "whereToFindUs3",
    "connectWithUs4",
    "getSolar3"
  ],
  section6: ["section6", "h4", "whereToFindUs3", "connectWithUs4", "getSolar3"],
  h4: ["h4"],
  whereToFindUs3: ["whereToFindUs3"],
  connectWithUs4: ["connectWithUs4"],
  getSolar3: ["getSolar3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  learnPage: "div";
  landingPage: "div";
  container2: "div";
  heading: "div";
  navigationBar: typeof NavigationBar;
  logo3: "a";
  solution3: "a";
  logo4: "a";
  container: "div";
  card: "div";
  faQsTab: typeof AntdTabs;
  aboutSolar: typeof AntdTabItem;
  aboutAccordion: typeof AntdAccordion;
  _1: typeof AntdAccordionItem;
  _2: typeof AntdAccordionItem;
  _3: typeof AntdAccordionItem;
  _4: typeof AntdAccordionItem;
  footer: "footer";
  section5: "div";
  brandLogo3: "div";
  section6: "div";
  h4: "h4";
  whereToFindUs3: "div";
  connectWithUs4: "div";
  getSolar3: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLearn__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLearn__VariantsArgs;
    args?: PlasmicLearn__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicLearn__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLearn__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLearn__ArgProps,
          internalVariantPropNames: PlasmicLearn__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLearn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "learnPage") {
    func.displayName = "PlasmicLearn";
  } else {
    func.displayName = `PlasmicLearn.${nodeName}`;
  }
  return func;
}

export const PlasmicLearn = Object.assign(
  // Top-level PlasmicLearn renders the root element
  makeNodeComponent("learnPage"),
  {
    // Helper components rendering sub-elements
    landingPage: makeNodeComponent("landingPage"),
    container2: makeNodeComponent("container2"),
    heading: makeNodeComponent("heading"),
    navigationBar: makeNodeComponent("navigationBar"),
    logo3: makeNodeComponent("logo3"),
    solution3: makeNodeComponent("solution3"),
    logo4: makeNodeComponent("logo4"),
    container: makeNodeComponent("container"),
    card: makeNodeComponent("card"),
    faQsTab: makeNodeComponent("faQsTab"),
    aboutSolar: makeNodeComponent("aboutSolar"),
    aboutAccordion: makeNodeComponent("aboutAccordion"),
    _1: makeNodeComponent("_1"),
    _2: makeNodeComponent("_2"),
    _3: makeNodeComponent("_3"),
    _4: makeNodeComponent("_4"),
    footer: makeNodeComponent("footer"),
    section5: makeNodeComponent("section5"),
    brandLogo3: makeNodeComponent("brandLogo3"),
    section6: makeNodeComponent("section6"),
    h4: makeNodeComponent("h4"),
    whereToFindUs3: makeNodeComponent("whereToFindUs3"),
    connectWithUs4: makeNodeComponent("connectWithUs4"),
    getSolar3: makeNodeComponent("getSolar3"),

    // Metadata about props expected for PlasmicLearn
    internalVariantProps: PlasmicLearn__VariantProps,
    internalArgProps: PlasmicLearn__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLearn;
/* prettier-ignore-end */
